
import os
import pytest
import shutil
import tempfile

import pymongo
import montydb


def pytest_addoption(parser):
    parser.addoption("--storage",
                     action="store",
                     default="memory",
                     help="""
                     Select storage engine:
                        * memory (default)
                        * sqlite
                        * flatfile
                        * lightning (lmdb)
                     """)
    parser.addoption("--use_bson",
                     action="store_true",
                     default=False,
                     help="Use bson in tests")


# (NOTE) `bson` should be accessible in test, even use_bson is False

@pytest.fixture(scope="session")
def skip_if_no_bson_(use_bson):
    if not use_bson:
        pytest.skip("BSON module is disabled.")


def skip_if_no_bson(func):
    return pytest.mark.usefixtures("skip_if_no_bson_")(func)


def set_bson(use_bson):
    from montydb.types import bson_
    bson_.init(use_bson)

    if not use_bson:
        # Override `ObjectId.__eq__` so the `ObjectId` instanced
        # from `montydb.types` can be compared with the one that
        # was generated by `pymongo`.
        from bson import ObjectId as RealOjbectId

        def __eq__(self, other):
            if isinstance(other, (bson_.ObjectId, RealOjbectId)):
                return self.binary == other.binary
            return NotImplemented

        bson_.ObjectId.__eq__ = __eq__


def _gettempdir():
    return tempfile.gettempdir()


@pytest.fixture
def gettempdir():
    return _gettempdir()


@pytest.fixture(scope="session")
def storage(request):
    return request.config.getoption("--storage")


@pytest.fixture(scope="session")
def use_bson(request):
    return request.config.getoption("--use_bson")


@pytest.fixture(scope="session")
def tmp_monty_repo():
    tmp_dir = os.path.join(_gettempdir(), "monty")
    if os.path.isdir(tmp_dir):
        shutil.rmtree(tmp_dir)
    return tmp_dir


@pytest.fixture(scope="session")
def mongo_client():
    client = pymongo.MongoClient("mongodb://localhost:27017")
    existed_dbs = client.list_database_names() + ["admin", "config"]
    yield client
    # db cleanup
    for db in client.list_database_names():
        if db in existed_dbs:
            continue
        client.drop_database(db)


@pytest.fixture(scope="session")
def mongo_version(mongo_client):
    return mongo_client.server_info()["versionArray"]


@pytest.fixture(scope="session")
def monty_client(storage, tmp_monty_repo, mongo_version, use_bson):
    set_bson(use_bson)

    if os.path.isdir(tmp_monty_repo):
        shutil.rmtree(tmp_monty_repo)

    mongo_ver = "%d.%d" % (mongo_version[0], mongo_version[1])

    if storage == "memory":
        tmp_monty_repo = ":memory:"

    montydb.set_storage(tmp_monty_repo,
                        storage,
                        mongo_version=mongo_ver,
                        use_bson=use_bson)

    client = montydb.MontyClient(tmp_monty_repo)
    # purge_all_db
    for db in client.list_database_names():
        client.drop_database(db)
    return client


@pytest.fixture(scope="session")
def monty_database(monty_client):
    return monty_client["test_db"]


@pytest.fixture(scope="session")
def mongo_database(mongo_client):
    return mongo_client["test_db"]
